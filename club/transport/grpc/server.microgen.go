// Code generated by microgen 1.0.4. DO NOT EDIT.

// DO NOT EDIT.
package transportgrpc

import (
	grpc "github.com/go-kit/kit/transport/grpc"
	pb "github.com/justyntemme/wp/club/proto"
	transport "github.com/justyntemme/wp/club/transport"
	context "golang.org/x/net/context"
)

type clubServiceServer struct {
	pb.UnimplementedClubServiceServer
	getClubById       grpc.Handler
	getTopClubs       grpc.Handler
	getTopClubsNearMe grpc.Handler
	getAllClubsNearMe grpc.Handler
}

func NewGRPCServer(endpoints *transport.EndpointsSet, opts ...grpc.ServerOption) pb.ClubServiceServer {
	return &clubServiceServer{
		getAllClubsNearMe: grpc.NewServer(
			endpoints.GetAllClubsNearMeEndpoint,
			_Decode_GetAllClubsNearMe_Request,
			_Encode_GetAllClubsNearMe_Response,
			opts...,
		),
		getClubById: grpc.NewServer(
			endpoints.GetClubByIdEndpoint,
			_Decode_GetClubById_Request,
			_Encode_GetClubById_Response,
			opts...,
		),
		getTopClubs: grpc.NewServer(
			endpoints.GetTopClubsEndpoint,
			_Decode_GetTopClubs_Request,
			_Encode_GetTopClubs_Response,
			opts...,
		),
		getTopClubsNearMe: grpc.NewServer(
			endpoints.GetTopClubsNearMeEndpoint,
			_Decode_GetTopClubsNearMe_Request,
			_Encode_GetTopClubsNearMe_Response,
			opts...,
		),
	}
}

func newOneToManyStreamServer(endpoint transport.OneToManyStreamEndpoint) transport.OneToManyStreamEndpoint {
	return endpoint
}

func newManyToOneStreamServer(endpoint transport.ManyToOneStreamEndpoint) transport.ManyToOneStreamEndpoint {
	return endpoint
}

func newManyToManyStreamServer(endpoint transport.ManyToManyStreamEndpoint) transport.ManyToManyStreamEndpoint {
	return endpoint
}

func (S *clubServiceServer) GetClubById(ctx context.Context, req *pb.GetClubByIdRequest) (*pb.GetClubByIdResponse, error) {
	_, resp, err := S.getClubById.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetClubByIdResponse), nil
}

func (S *clubServiceServer) GetTopClubs(ctx context.Context, req *pb.GetTopClubsRequest) (*pb.GetTopClubsResponse, error) {
	_, resp, err := S.getTopClubs.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetTopClubsResponse), nil
}

func (S *clubServiceServer) GetTopClubsNearMe(ctx context.Context, req *pb.GetTopClubsNearMeRequest) (*pb.GetTopClubsNearMeResponse, error) {
	_, resp, err := S.getTopClubsNearMe.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetTopClubsNearMeResponse), nil
}

func (S *clubServiceServer) GetAllClubsNearMe(ctx context.Context, req *pb.GetAllClubsNearMeRequest) (*pb.GetAllClubsNearMeResponse, error) {
	_, resp, err := S.getAllClubsNearMe.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetAllClubsNearMeResponse), nil
}
