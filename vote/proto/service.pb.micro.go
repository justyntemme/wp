// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

package protobuf

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VoteService service

func NewVoteServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VoteService service

type VoteService interface {
	GetVoteById(ctx context.Context, in *GetVoteByIdRequest, opts ...client.CallOption) (*GetVoteByIdResponse, error)
	GetVotesByClubId(ctx context.Context, in *GetVotesByClubIdRequest, opts ...client.CallOption) (*GetVotesByClubIdResponse, error)
	GetVotesByUserId(ctx context.Context, in *GetVotesByUserIdRequest, opts ...client.CallOption) (*GetVotesByUserIdResponse, error)
}

type voteService struct {
	c    client.Client
	name string
}

func NewVoteService(name string, c client.Client) VoteService {
	return &voteService{
		c:    c,
		name: name,
	}
}

func (c *voteService) GetVoteById(ctx context.Context, in *GetVoteByIdRequest, opts ...client.CallOption) (*GetVoteByIdResponse, error) {
	req := c.c.NewRequest(c.name, "VoteService.GetVoteById", in)
	out := new(GetVoteByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteService) GetVotesByClubId(ctx context.Context, in *GetVotesByClubIdRequest, opts ...client.CallOption) (*GetVotesByClubIdResponse, error) {
	req := c.c.NewRequest(c.name, "VoteService.GetVotesByClubId", in)
	out := new(GetVotesByClubIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteService) GetVotesByUserId(ctx context.Context, in *GetVotesByUserIdRequest, opts ...client.CallOption) (*GetVotesByUserIdResponse, error) {
	req := c.c.NewRequest(c.name, "VoteService.GetVotesByUserId", in)
	out := new(GetVotesByUserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VoteService service

type VoteServiceHandler interface {
	GetVoteById(context.Context, *GetVoteByIdRequest, *GetVoteByIdResponse) error
	GetVotesByClubId(context.Context, *GetVotesByClubIdRequest, *GetVotesByClubIdResponse) error
	GetVotesByUserId(context.Context, *GetVotesByUserIdRequest, *GetVotesByUserIdResponse) error
}

func RegisterVoteServiceHandler(s server.Server, hdlr VoteServiceHandler, opts ...server.HandlerOption) error {
	type voteService interface {
		GetVoteById(ctx context.Context, in *GetVoteByIdRequest, out *GetVoteByIdResponse) error
		GetVotesByClubId(ctx context.Context, in *GetVotesByClubIdRequest, out *GetVotesByClubIdResponse) error
		GetVotesByUserId(ctx context.Context, in *GetVotesByUserIdRequest, out *GetVotesByUserIdResponse) error
	}
	type VoteService struct {
		voteService
	}
	h := &voteServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VoteService{h}, opts...))
}

type voteServiceHandler struct {
	VoteServiceHandler
}

func (h *voteServiceHandler) GetVoteById(ctx context.Context, in *GetVoteByIdRequest, out *GetVoteByIdResponse) error {
	return h.VoteServiceHandler.GetVoteById(ctx, in, out)
}

func (h *voteServiceHandler) GetVotesByClubId(ctx context.Context, in *GetVotesByClubIdRequest, out *GetVotesByClubIdResponse) error {
	return h.VoteServiceHandler.GetVotesByClubId(ctx, in, out)
}

func (h *voteServiceHandler) GetVotesByUserId(ctx context.Context, in *GetVotesByUserIdRequest, out *GetVotesByUserIdResponse) error {
	return h.VoteServiceHandler.GetVotesByUserId(ctx, in, out)
}
