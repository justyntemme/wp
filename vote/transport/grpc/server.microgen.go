// Code generated by microgen 1.0.4. DO NOT EDIT.

// DO NOT EDIT.
package transportgrpc

import (
	grpc "github.com/go-kit/kit/transport/grpc"
	pb "github.com/justyntemme/wp/vote/proto"
	transport "github.com/justyntemme/wp/vote/transport"
	context "golang.org/x/net/context"
)

type voteServiceServer struct {
	pb.UnimplementedVoteServiceServer
	getVoteById grpc.Handler
}

func NewGRPCServer(endpoints *transport.EndpointsSet, opts ...grpc.ServerOption) pb.VoteServiceServer {
	return &voteServiceServer{getVoteById: grpc.NewServer(
		endpoints.GetVoteByIdEndpoint,
		_Decode_GetVoteById_Request,
		_Encode_GetVoteById_Response,
		opts...,
	)}
}

func newOneToManyStreamServer(endpoint transport.OneToManyStreamEndpoint) transport.OneToManyStreamEndpoint {
	return endpoint
}

func newManyToOneStreamServer(endpoint transport.ManyToOneStreamEndpoint) transport.ManyToOneStreamEndpoint {
	return endpoint
}

func newManyToManyStreamServer(endpoint transport.ManyToManyStreamEndpoint) transport.ManyToManyStreamEndpoint {
	return endpoint
}

func (S *voteServiceServer) GetVoteById(ctx context.Context, req *pb.GetVoteByIdRequest) (*pb.GetVoteByIdResponse, error) {
	_, resp, err := S.getVoteById.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetVoteByIdResponse), nil
}
